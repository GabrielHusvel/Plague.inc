import streamlit as st
import pandas as pd
from dengue_data_processing import carregar_dataset
import pydeck as pdk
import plotly.graph_objects as go
import streamlit as st

def definir_cor(risco):
    if risco > 7:
        return [255, 0, 0, 160]  # Vermelho (risco alto)
    elif 1 < risco <= 6.99:
        return [255, 255, 0, 160]  # Amarelo (risco moderado)
    else:
        return [0, 255, 0, 160]  # Verde (risco baixo)

def plotar_mapa(df):
    layer = pdk.Layer(
        'ScatterplotLayer',
        data=df,
        get_position='[longitude, latitude]',
        get_radius='5000',
        get_fill_color='cor',
        pickable=True,
        auto_highlight=True,
    )
    view_state = pdk.ViewState(
        latitude=df['latitude'].mean(),
        longitude=df['longitude'].mean(),
        zoom=6
    )
    r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={
        'html': '<b>MunicÃ­pio:</b> {municipio}<br><b>Casos:</b> {casos}<br><b>Est. Casos:</b> {casos_est}<br><b>DisseminaÃ§Ã£o:</b> {disseminaÃ§Ã£o}<br><b>Temperatura:</b> {tempmed}Â°C<br><b>Umidade:</b> {umidmed}%',
        'style': {'color': 'white'}
    })
    st.pydeck_chart(r)

# FunÃ§Ã£o para plotar grÃ¡ficos interativos
def plotar_graficos(df_municipio, df_min_max, municipio_usuario, estado_usuario):
    fig = go.Figure()
        # Verificar se hÃ¡ dados para o municÃ­pio
    if not df_municipio.empty:
        # Adiciona a linha do municÃ­pio selecionado
        fig.add_trace(go.Scatter(x=df_municipio['data_week'], y=df_municipio['casos'],
                                mode='lines+markers', name=f'{municipio_usuario} - Casos', line=dict(color='blue', width=4)))
    else:
        # Mensagem se nÃ£o houver dados para o municÃ­pio
        st.warning(f'NÃ£o hÃ¡ dados disponÃ­veis para o municÃ­pio {municipio_usuario} no perÃ­odo selecionado.')

    # Linha dos casos mÃ­nimos do estado
    fig.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('casos', 'min')],
                            mode='lines', name='Casos MÃ­nimos (Estado)', line=dict(color='green', dash='dash')))
    # Linha dos casos mÃ¡ximos do estado
    fig.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('casos', 'max')],
                            mode='lines', name='Casos MÃ¡ximos (Estado)', line=dict(color='red', dash='dash')))
    # ConfiguraÃ§Ãµes do layout
    fig.update_layout(title=f'ComparaÃ§Ã£o de IncidÃªncia de Casos {estado_usuario}', xaxis_title='Semana',
                    yaxis_title='NÃºmero de Casos', legend_title='MunicÃ­pios')
    st.plotly_chart(fig)


    # GrÃ¡fico de linha para Temperatura MÃ©dia (tempmed)
    fig_tempmed = go.Figure()

    # Adicionar a linha do municÃ­pio selecionado
    fig_tempmed.add_trace(go.Scatter(x=df_municipio['data_week'], y=df_municipio['tempmed'],
                                    mode='lines+markers', name=f'{municipio_usuario} - Temperatura MÃ©dia', line=dict(color='blue', width=4)))

    # Adicionar a linha da temperatura mÃ­nima do estado
    fig_tempmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('tempmin', 'min')],
                                    mode='lines', name='Temperatura MÃ­nima (Estado)', line=dict(color='green', dash='dash')))

    # Adicionar a linha da temperatura mÃ¡xima do estado
    fig_tempmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('tempmax', 'max')],
                                    mode='lines', name='Temperatura MÃ¡xima (Estado)', line=dict(color='red', dash='dash')))

    # Adicionar tÃ­tulo e rÃ³tulos
    fig_tempmed.update_layout(title=f'ComparaÃ§Ã£o de Temperatura MÃ©dia no Estado {estado_usuario}',
                            xaxis_title='Semana',
                            yaxis_title='Temperatura MÃ©dia (Â°C)',
                            legend_title='MunicÃ­pios')

    st.plotly_chart(fig_tempmed)


    # GrÃ¡fico de linha para Umidade MÃ©dia (umidmed)
    fig_umidmed = go.Figure()

    # Adicionar a linha do municÃ­pio selecionado
    fig_umidmed.add_trace(go.Scatter(x=df_municipio['data_week'], y=df_municipio['umidmed'],
                                    mode='lines+markers', name=f'{municipio_usuario} - Umidade MÃ©dia', line=dict(color='blue', width=4)))

    # Adicionar a linha da umidade mÃ­nima do estado
    fig_umidmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('umidmin', 'min')],
                                    mode='lines', name='Umidade MÃ­nima (Estado)', line=dict(color='green', dash='dash')))

    # Adicionar a linha da umidade mÃ¡xima do estado
    fig_umidmed.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('umidmax', 'max')],
                                    mode='lines', name='Umidade MÃ¡xima (Estado)', line=dict(color='red', dash='dash')))

    # Adicionar tÃ­tulo e rÃ³tulos
    fig_umidmed.update_layout(title=f'ComparaÃ§Ã£o de Umidade MÃ©dia no Estado {estado_usuario}',
                            xaxis_title='Semana',
                            yaxis_title='Umidade MÃ©dia (%)',
                            legend_title='MunicÃ­pios')

    st.plotly_chart(fig_umidmed)


    # GrÃ¡fico de linha para DisseminaÃ§Ã£o (disseminaÃ§Ã£o)
    fig_disseminacao = go.Figure()

    # Adicionar a linha do municÃ­pio selecionado
    fig_disseminacao.add_trace(go.Scatter(x=df_municipio['data_week'], y=df_municipio['disseminaÃ§Ã£o'],
                                        mode='lines+markers', name=f'{municipio_usuario} - DisseminaÃ§Ã£o', line=dict(color='blue', width=4)))

    # Adicionar a linha da disseminaÃ§Ã£o mÃ­nima do estado
    fig_disseminacao.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('disseminaÃ§Ã£o', 'min')],
                                        mode='lines', name='DisseminaÃ§Ã£o MÃ­nima (Estado)', line=dict(color='green', dash='dash')))

    # Adicionar a linha da disseminaÃ§Ã£o mÃ¡xima do estado
    fig_disseminacao.add_trace(go.Scatter(x=df_min_max['data_week'], y=df_min_max[('disseminaÃ§Ã£o', 'max')],
                                        mode='lines', name='DisseminaÃ§Ã£o MÃ¡xima (Estado)', line=dict(color='red', dash='dash')))

    # Adicionar tÃ­tulo e rÃ³tulos
    fig_disseminacao.update_layout(title=f'ComparaÃ§Ã£o de DisseminaÃ§Ã£o no Estado {estado_usuario}',
                                xaxis_title='Semana',
                                yaxis_title='DisseminaÃ§Ã£o',
                                legend_title='MunicÃ­pios')

    st.plotly_chart(fig_disseminacao)

import user_global

def exibir_analise_municipio(df):
    
    st.title("ğŸ¦ŸAnÃ¡lise da SituaÃ§Ã£o do MunicÃ­pio - DengueğŸ¦Ÿ")
    
    # ConversÃ£o e tratamento dos dados
    df['data_week'] = pd.to_datetime(df['data_week'], errors='coerce')
    municipio_usuario = st.sidebar.selectbox("Selecione seu municÃ­pio", sorted(df['municipio'].unique()))
    estado_usuario = df[df['municipio'] == municipio_usuario]['estado'].values[0]
    df_estado = df[df['estado'] == estado_usuario]
    data_maxima = df_estado['data_week'].max()
    filtro_periodo = st.radio("Filtrar por", ('Ãšltimo MÃªs', 'Ãšltimo Ano'))
    user_global.MUNICIPIO_USUARIO = municipio_usuario
    user_global.ESTADO_USUARIO = estado_usuario
    # Definir o perÃ­odo de filtragem
    data_inicial = data_maxima - pd.DateOffset(months=1) if filtro_periodo == 'Ãšltimo MÃªs' else data_maxima - pd.DateOffset(years=1)
    df_filtrado = df_estado[(df_estado['data_week'] >= data_inicial) & (df_estado['data_week'] <= data_maxima)].copy()

    
    # Calcular risco e aplicar cor
    df_filtrado.loc[:, 'risco_dengue'] = df_filtrado['casos_est'] * 0.1 + df_filtrado['casos'] * 0.3 + df_filtrado['incidÃªncia_100khab'] * 0.1 + df_filtrado['disseminaÃ§Ã£o'] * 5
    df_filtrado.loc[:, 'cor'] = df_filtrado['risco_dengue'].apply(definir_cor)
    
    # Mostrar mapa interativo
    st.write("O mapa corresponde Ã  opÃ§Ã£o de um mÃªs.")
    plotar_mapa(df_filtrado)
    
    # Criar e exibir grÃ¡ficos
    df_min_max = df_filtrado.groupby('data_week').agg({
        'casos': ['min', 'max'],
        'incidÃªncia_100khab': ['min', 'max'],
        'disseminaÃ§Ã£o': ['min', 'max'],
        'umidmed': ['min', 'max'],
        'umidmin': ['min', 'max'],
        'umidmax': ['min', 'max'],
        'tempmed': ['min', 'max'],
        'tempmin': ['min', 'max'],
        'tempmax': ['min', 'max']
    }).reset_index()

    df_municipio = df_filtrado[df_filtrado['municipio'] == municipio_usuario]
    plotar_graficos(df_municipio, df_min_max, municipio_usuario, estado_usuario)

    return estado_usuario, municipio_usuario, df_municipio, df_filtrado 